## Partea 2: Partea vizuală

### HTML - Scheletul Aplicației
💡 Hint: Structura finală ar trebui să semene cu:
weather-app/
├── index.html
├── styles.css
├── app.js
├── modules/
│   ├── config.js
│   ├── weather-service.js
│   └── ui-controller.js
└── README.md
**Obiectiv**: Pagină funcțională cu toate elementele UI necesare

**Întrebări pentru reflecție:**

- Ce acțiuni poate face un utilizator într-o aplicație meteo?
- Ce informații vrea să vadă?
- Cum structurezi logic elementele?
- Ce elemente UI ai nevoie pentru o aplicație meteo?
    - Un loc să introduci numele orașului?
    - Un buton să cauți vremea?
    - Un buton să folosești locația curentă?
    - Un loc să afișezi rezultatele?
    - Ceva pentru loading și erori?

**Specificații tehnice:**

- HTML5 valid cu meta viewport
Link-uri către CSS și JavaScript (type="module")
Elementele UI necesare (cu ID-urile specifice):
Un input pentru numele orașului (id="city-input")
Un buton de search (id="search-btn")
O zonă pentru loading (id="loading")
O zonă pentru erori (id="error")
O zonă pentru afișarea vremii (id="weather-display")
Câte un ID pentru fiecare element informativ (temperatura, umiditatea, apus, etc...)
💡 Template de pornire:
<!DOCTYPE html>
<html lang="ro">
  <head>
    <!-- Meta tags aici -->
    <title>Weather App</title>
    <!-- Link-uri către CSS și JS -->
  </head>
  <body>
    <div id="app">
      <!-- Structura ta aici -->
    </div>
  </body
</html>
**🧪 Validare:**

1. Deschide în browser → Se încarcă fără erori? (Poți folosi extensia Live Server (fire server) din VS Code)
2. F12 → Console → Fără erori roșii?
3. Vezi toate elementele pe pagină?

**💡 Hints pentru succes:**

- Grupează în `<header>` și `<main>`
- Adaugă `class="hidden"` pentru elemente inițial ascunse

### CSS - Transformarea Vizuală (opțional)

**Obiectiv**: Deși acest aspect este opțional, poate face diferența dintre un exercițiu și un proiect profesional

**Provocări de design:**

1. **Ce culori** asociezi cu o aplicație meteo?
2. **Cum faci** butoanele să pară clickable?
3. **Ce layout** funcționează pe telefon ȘI desktop?

**💡 Template de pornire:**
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.hidden {
  display: none;
}

/* Stilurile tale aici */
**💡 Hints pentru design:**

- **Background**: Încearcă un gradient frumos (ex: albastru → albastru închis)
- **Input-uri**: Border-radius pentru aspect modern, padding generos
- **Butoane**: Culori diferite pentru acțiuni diferite, hover effects
- **Loading**: O animație CSS pentru spinner (rotație infinită)
- **Layout**: Centrat, cu max-width pentru desktop

**🧪 Validare:**

1. **Visual**: Arată mult mai bine după CSS?
2. **Responsive**: Redimensionează fereastra - se adaptează?
3. **Interactive**: Hover pe butoane - se schimbă?
4. **Hidden class**: În DevTools, adaugă `hidden` - dispare elementul?

## Partea 3: JavaScript Modular

### Config Module

**Obiectiv**: Centralizarea setărilor aplicației

**Întrebări fundamentale:**

- De ce să separi configurația?
- Ce setări va avea aplicația?
- Cum testezi un modul înainte să-l folosești?

**Provocarea ta (`modules/config.js`):**

- Exportă un obiect "MOCK_DATA" care să conțină un simularea unui răspuns (mock), asemănător cu ce ar răspunde un API de vreme
- Intră pe https://openweathermap.org/api și vezi cum arată un asemenea răspuns pentru API-ul "Current Weather Data"

**💡 Structură sugerată:**
// Cum arată datele unei API meteo?
// Temperatură, umiditate, vânt, descriere...
export const MOCK_DATA = {
  main: {
    // ...
  },
  weather: [
    // ...
  ],
  // ...
}
🧪 Validare:
Console test:
import('./modules/config.js').then((config) => {
  console.log('MOCK_DATA:', config.MOCK_DATA)
})


### Weather Service

**Obiectiv**: Funcții pentru obținerea datelor meteo (deocamdată simulate)

**Concepte cheie:**

- De ce să simulez un API?
- Cum fac o funcție să pară asincronă?
- Cum gestionez erorile?

**Funcții de implementat:**
export const getCurrentWeather = async (city) => {
  // Simulează delay API (~1 secundă)
  // Returnează MOCK_DATA cu numele orașului actualizat
  // Gestionează erorile
}

export const getWeatherByCoords = async (lat, lon) => {
  // Similar, dar pentru coordonate
}
💡 Hint pentru delay:
await new Promise((resolve) => setTimeout(resolve, 1000))

🧪 Validare pas cu pas:
import('./modules/weather-service.js').then((service) => {
  console.time('weather-test')
  service.getCurrentWeather('Cluj').then((data) => {
    console.timeEnd('weather-test') // ~1000ms?
    console.log('Received data:', data)
    console.log('City updated?', data.name === 'Cluj')
  })
})
- Durează ~1 secundă să primești răspunsul?
- Numele orașului s-a actualizat?
### UI Controller

**Obiectiv**: Separarea completă a logicii de interfață

**Filosofia separării:**
De ce să nu pui totul în app.js? Pentru că UI-ul se schimbă, logica rămâne! Iar în timp aceste fișiere vor crește și va fi tot mai greu să le ai pe toate într-un singur loc.

**Funcții/obiecte esențiale:**

1. `elements` - păstrează toate elementele într-un singur obiect
2. `showLoading()` / `hideLoading()` - stări de încărcare
3. `showError()` - gestionarea erorilor
4. `displayWeather()` - afișarea datelor meteo
5. `getCityInput()` / `clearInput()` - management input

**Provocarea mare - `displayWeather()`:**
Cum mapezi proprietățile acestui obiect pe elementele DOM existente:
{
  name: "Oradea",
  main: { temp: 22, humidity: 65 },
  weather: [{ description: "senin" }],
  wind: { speed: 3.2 }
}
Într-un HTML frumos pentru utilizator?

**💡 Hints:**

**Pentru `elements`:
export const elements = {
  cityInput: document.querySelector('#city-input'),
  // ... restul elementelor
}
- Găsește fiecare câmp (temperatură, descriere, icon, etc.) în DOM și actualizează proprietățile `textContent`, `src`, etc. cu datele corespunzătoare
- Include: numele orașului, temperatura, descrierea, detalii (umiditate, vânt, etc.)
- Convertește m/s în km/h (×3.6)
- Formatează timpurile Unix în ore locale (pentru răsărit și apus)

**🧪 Validare progresivă:**

1. **Elementele:**
import('./modules/ui-controller.js').then((ui) => {
  const elements = ui.elements
  console.log('Elements found:', Object.keys(elements))
})

2.Loading/Error:
ui.showLoading() // Apare?
ui.showError('Test') // Apare?

3.Weather Display:
import('./modules/config.js').then((config) => {
  ui.displayWeather(config.MOCK_DATA) // Arată frumos?
})

### Main App

**Obiectiv**: Orchestrarea completă a aplicației

**Rolul app.js:**
"Dirijorul orchestrei" - coordonează toate modulele să lucreze în armonie.

**Funcții principale:**
const setupEventListeners = () => {
  // Submit în form (enter din search field sau click pe buton)
}

const handleSearch = async () => {
  // Validează input
  // Arată loading
  // Apelează weather service
  // Ascunde loading, arată rezultat
  // Gestionează erorile
}

const isValidCity = (city) => {
  // Gol? Prea scurt? Conține cifre/simboluri?
  return city.length >= 2 && /^[a-zA-ZăâîșțĂÂÎȘȚ\\s-]+$/.test(city)
}

// Pornește setupEventListeners și displayWeather pentru a rula aplicația
**🧪 Validare completă:**

1. **Start**: Se încarcă vremea pentru orașul default?
2. **Search**: Introdu oraș → loading → rezultat?
3. **Validare**: Input gol → eroare clară?
4. **Enter**: Funcționează ca alternativă la click?
## Final Validation - Checklist

### ✅ Funcționalitate

- [ ]  Start automat cu vremea default
- [ ]  Search pentru orice oraș
- [ ]  Validare input + erori clare
- [ ]  Loading states pentru toate acțiunile

### ✅ Cod

- [ ]  4 module JavaScript conectate
- [ ]  ES6 imports/exports
- [ ]  Arhitectură modulară
- [ ]  Cod curat și comentat
- [ ]  Zero erori în consolă
### UX & Design

- [ ]  Interfață modernă
- [ ]  Responsive design
- [ ]  Interacțiuni intuitive
- [ ]  Feedback vizual pentru toate acțiunile